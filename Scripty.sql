use Библиотека;


DROP PROCEDURE GetUserRoles;
DROP PROCEDURE GetUserTablePermissions;
DROP PROCEDURE RemoveOutdatedReaders;
DROP PROCEDURE GetPercentageUsersByGroupAndFaculty;
DROP PROCEDURE GetDebtorsReport
DROP PROCEDURE GetReaderInfoExact
DROP FUNCTION BooksPublicInfo
DROP PROCEDURE dbo.GetDependentTableName;
DROP PROCEDURE FindBookLocation;

DROP TABLE АрхивЧитателей
alter table Книга
drop constraint FK_Книга_Издательство,
constraint FK_Книга_Жанр,
constraint FK_Книга_Стеллаж
alter table [Автор книги]
drop constraint FK_Книга_Автор_книги,
constraint FK_Автор_книги_Авторы
alter table [Поступление книг]
drop constraint FK_Книга_Поступления_книг,
constraint FK_Поступление_книг_Поставки
alter table [Списание книг]
drop constraint FK_Книга_Списание_книг,
constraint FK_Списание_книг_Списание
alter table [Выдача и возврат]
drop constraint FK_Выдача_и_возврат_Книга,
constraint FK_Выдача_и_возврат_Сотрудники,
constraint FK_Выдача_и_возврат_Читатель
alter table [Стеллажи]
drop constraint FK_Стеллажи_Помещения
alter table [Сотрудники]
drop constraint FK_Сотрудники_Помещения
alter table [Поставки]
drop constraint FK_Поставки_Сотрудники
alter table [Списание]
drop constraint FK_Списание_Сотрудники
alter table Группа
drop constraint FK_Группа_Факультеты
alter table Читатель
drop constraint FK_Читатель_Группы
drop table Издательство
drop table Жанр
drop table Книга
drop table [Автор книги]
drop table Авторы
drop table [Поступление книг]
drop table Поставки
drop table [Списание книг]
drop table Списание
drop table [Выдача и возврат]
drop table Стеллажи
drop table Читатель
drop table [Помещения]
drop table Сотрудники
drop table Факультет
drop table Группа
GO

Create table Издательство
(Код int not null primary key identity,
Название varchar(50),
Город varchar(40),
Адрес varchar(80) not null
)
go

create table Жанр
(Код int primary key not null identity,
[Название жанра] varchar(40) not null
)
GO

create table Книга
(Код int primary key not null identity,
[Код издательства] int,
[Код жанра] int,
[Код стеллажа] int,
[Название] varchar(50),
[Год выпуска] int,
[Число страниц] int,
[Язык книги] varchar(20) not null,
[Обложка] VARBINARY(MAX),
[Краткое описание] varchar(4000),
[Цена] money
)
GO

create table [Автор книги]
(Код int primary key not null identity,
[Код книги] int,
[Код автора] int
)
GO

create table Авторы
(Код int primary key not null identity,
[Фамилия] varchar(40),
[Имя] varchar(40),
[Отчество] varchar(40),
[Страна автора] varchar(40)
)
GO

create table [Поступление книг]
(Код int primary key not null identity,
[Код книги] int,
[Код поставки] Int,
[Число книг] int
)
GO

create table Поставки
(Код int primary key not null identity,
[Дата поставки] date,
[Код сотрудника] int,
[Поставщик] varchar(40)
)
GO

create table [Списание книг]
(Код int primary key not null identity,
[Код книги] int,
[Код списания книг] int,
[Число книг] int
)
GO

create table Списание
(Код int primary key not null identity,
[Дата списания] date,
[Код сотрудника] int
)
GO

create table [Выдача и возврат]
(
Код int primary key not null identity,
[Код читателя] int,
[Код книги] int,
[Инвентарный номер] varchar(40),
[Дата выдачи] date not null,
[Дата возврата] date,
[Код сотрудника, выдавшего книгу] int,
[Книга утеряна] bit
)
GO

create table Стеллажи
(Код int primary key not null identity,
[Код зала] int not null,
[Номер стеллажа] varchar(4)
)
GO

create table Помещения
(Код int primary key not null identity,
[Название] varchar(40),
[Читальный зал] bit,
[Архив] bit,
[Абонемент] bit,
[Адрес помещения] varchar(40) 
)
GO

CREATE TABLE Читатель
(
Код INT PRIMARY KEY NOT NULL IDENTITY,
[Фамилия] VARCHAR(40),
[Имя] VARCHAR(40),
[Отчество] VARCHAR(40),
[Дата рождения] DATE,
[Контактный номер] VARCHAR(40),
[Адрес проживания] VARCHAR(40),
[Данные паспорта] CHAR(60),
[Номер читательского билета] VARCHAR(40),
[Код группы] INT,
[Имя для входа] VARCHAR(100)
);

create table Сотрудники
(Код int primary key not null identity,
[Код помещения] int,
[Фамилия] varchar(40),
[Имя] varchar(40),
[Отчество] varchar(40),
[Занимаемая должность] varchar(40),
[Стаж] int
)
GO


CREATE TABLE Группа
(
Код INT PRIMARY KEY NOT NULL IDENTITY,
Название VARCHAR(40) NOT NULL,
[Год поступления] INT NOT NULL,
[Год окончания] INT NOT NULL,
[Код факультета] INT NOT NULL
);
CREATE TABLE Факультет
(
Код INT PRIMARY KEY NOT NULL IDENTITY,
Название VARCHAR(40) NOT NULL
);


go



CREATE TABLE АрхивЧитателей (
        Код INT PRIMARY KEY NOT NULL IDENTITY,
        [Фамилия] VARCHAR(40),
        [Имя] VARCHAR(40),
        [Отчество] VARCHAR(40),
        [Дата рождения] DATE,
        [Контактный номер] VARCHAR(40),
        [Адрес проживания] VARCHAR(40),
        [Данные паспорта] CHAR(60),
        [Номер читательского билета] VARCHAR(40),
        [Название группы] varchar(20),
		[Факультет] varchar(20),
		[Задолженности] varchar(500),
        [Имя для входа] VARCHAR(100)
    );



alter table Книга
add constraint FK_Книга_Издательство  foreign key ([Код издательства]) references Издательство(Код),
constraint FK_Книга_Жанр  foreign key ([Код жанра]) references Жанр(Код),
constraint FK_Книга_Стеллаж  foreign key ([Код стеллажа]) references Стеллажи(Код)
GO
alter table [Автор книги]
add constraint FK_Книга_Автор_книги  foreign key ([Код книги]) references Книга(Код),
constraint FK_Автор_книги_Авторы  foreign key ([Код автора]) references Авторы(Код)
GO
alter table [Поступление книг]
add constraint FK_Книга_Поступления_книг foreign key ([Код книги]) references Книга(Код),
constraint FK_Поступление_книг_Поставки  foreign key ([Код поставки]) references Поставки(Код)
GO
alter table [Списание книг]
add constraint FK_Книга_Списание_книг foreign key ([Код книги]) references Книга(Код),
constraint FK_Списание_книг_Списание  foreign key ([Код списания книг]) references Списание(Код)
GO
alter table [Выдача и возврат]
add constraint FK_Выдача_и_возврат_Книга foreign key ([Код книги]) references Книга(Код),
constraint FK_Выдача_и_возврат_Сотрудники foreign key ([Код сотрудника, выдавшего книгу]) references Сотрудники(Код),
constraint FK_Выдача_и_возврат_Читатель foreign key ([Код читателя]) references Читатель(Код)
GO
alter table [Стеллажи]
add constraint FK_Стеллажи_Помещения  foreign key ([Код зала]) references Помещения(Код)
GO
alter table [Сотрудники]
add constraint FK_Сотрудники_Помещения  foreign key ([Код помещения]) references Помещения(Код)
GO

alter table [Поставки]
add constraint FK_Поставки_Сотрудники  foreign key ([Код сотрудника]) references Сотрудники(Код)
GO

alter table [Списание]
add constraint FK_Списание_Сотрудники  foreign key ([Код сотрудника]) references Сотрудники(Код)
GO

alter table Читатель
add constraint FK_Читатель_Группы foreign key ([Код группы]) references Группа(Код)
GO
alter table Группа
add constraint FK_Группа_Факультеты foreign key ([Код факультета]) references Факультет(Код)
GO

-- Для таблицы Жанр
INSERT INTO Жанр ([Название жанра])
VALUES 
    ('Фантастика'),
    ('Роман'),
    ('Детектив'),
    ('Поэзия');

-- Для таблицы Авторы
INSERT INTO Авторы ([Фамилия], [Имя], [Отчество], [Страна автора])
VALUES 
    ('Толстой', 'Лев', 'Николаевич', 'Россия'),
    ('Достоевский', 'Федор', 'Михайлович', 'Россия'),
    ('Пушкин', 'Александр', 'Сергеевич', 'Россия'),
    ('Чехов', 'Антон', 'Павлович', 'Россия'),
	('Аркадий', 'Стругацкий', '', 'Россия'),
	('Борис', 'Стругацкий', '', 'Россия');

-- Для таблицы Помещения
INSERT INTO Помещения ([Название], [Адрес помещения])
VALUES 
    ('Главный читальный зал', 'ул. Ленина, 10'),
    ('Детский отдел', 'ул. Пушкина, 5'),
    ('Абонемент', 'ул. Кирова, 15');

-- Для таблицы Стеллажи
INSERT INTO Стеллажи ([Код зала], [Номер стеллажа])
VALUES 
    (1, 'A1'),
    (1, 'A2'),
    (1, 'B1'),
    (2, 'C1'),
    (3, 'A1');

INSERT INTO Издательство values
('АСТ', 'Москва', 'Междугородняя 6'),
('ГГУ им. Ф. Скорины', 'Гомель', 'Советская ?')
-- Для таблицы Книга
INSERT INTO Книга ([Код издательства], [Код жанра], [Код стеллажа], [Название], [Год выпуска], [Число страниц], [Язык книги], [Обложка], [Краткое описание], [Цена])
VALUES 
    (1, 1, 1, 'Война и мир', 1869, 1225, 'русский', NULL, 'Эпический роман Льва Толстого о войне 1812 года', 25.99),
	(1, 1, 1, 'Война и мир', 1869, 1225, 'русский', NULL, 'Эпический роман Льва Толстого о войне 1812 года', 25.99),
    (2, 2, 2, 'Преступление и наказание', 1866, 551, 'русский', NULL, 'Роман Федора Достоевского о преступлении и наказании 987897897987897854848546548756	714273173213213	213212312313213213213213213213213213215649674987987', 19.99),
    (2, 3, 3, 'Евгений Онегин', 1833, 368, 'русский', NULL, 'Роман Александра Пушкина', 14.99),
    (1, 4, 4, 'Дама с собачкой', 1899, 192, 'русский', null, 'Повесть Антона Чехова', 12.99),
	(1,3,1,'Пикник на обочине', 2008, 48, 'русский', (SELECT BulkColumn FROM Openrowset(Bulk 'G:\content.jpg', Single_Blob) as Image),'легендарная философско-фантастическая книга',30),
	(1,3,1,'Пикник на обочине', 2008, 48, 'русский', (SELECT BulkColumn FROM Openrowset(Bulk 'G:\content.jpg', Single_Blob) as Image),'легендарная философско-фантастическая книга',30),
	(1,3,1,'Пикник на обочине', 2008, 48, 'русский', (SELECT BulkColumn FROM Openrowset(Bulk 'G:\content.jpg', Single_Blob) as Image),'легендарная философско-фантастическая книга',30)
	-- (SELECT BulkColumn FROM Openrowset(Bulk 'D:\Downloads\43w8XwCrfeQ.jpg', Single_Blob) as Image)
-- Для таблицы [Автор книги]
INSERT INTO [Автор книги] ([Код книги], [Код автора])
VALUES 
    (1, 1),
	(2, 1),
    (3, 2),
    (4, 3),
    (5, 4),
	(6,5),
	(6,6),
	(7,5),
	(7,6),
	(8,5),
	(8,6)
-- Для таблицы Сотрудники
INSERT INTO Сотрудники ([Код помещения], [Фамилия], [Имя], [Отчество], [Занимаемая должность], [Стаж])
VALUES 
    (1, 'Иванов', 'Петр', 'Ильич', 'Библиотекарь', 5),
    (1, 'Петров', 'Иван', 'Сергеевич', 'Администратор', 3),
    (2, 'Сидорова', 'Анна', 'Петровна', 'Библиотекарь', 4),
    (3, 'Козлова', 'Елена', 'Ивановна', 'Кассир', 2);

-- Для таблицы Поставки
INSERT INTO Поставки ([Дата поставки], [Код сотрудника], [Поставщик])
VALUES 
    ('2023-01-15', 1, 'Книгоиздательство "Русский Классик"'),
    ('2023-02-20', 2, 'Издательский дом "Москва"'),
    ('2023-03-25', 3, 'Издательство "Огонек"');

-- Для таблицы [Поступление книг]
INSERT INTO [Поступление книг] ([Код книги], [Код поставки], [Число книг])
VALUES 
    (1, 1, 20),
    (2, 2, 15),
    (3, 3, 30),
    (4, 1, 25);


-- Для таблицы Факультет
INSERT INTO Факультет (Название)
VALUES 
    ('математики и ТП'),
    ('физики');
-- Для таблицы Группа
INSERT INTO Группа (Название, [Год поступления], [Год окончания], [Код факультета])
VALUES 
    ('ПИ-20', 2020, 2023, 1),
    ('ПО-19', 2019, 2023, 1),
    ('ИТП-21', 2019, 2025, 1),
    ('ЭК-22', 2020, 2025, 1),
    ('М-20', 2020, 2024, 2);



-- Для таблицы Читатель
INSERT INTO Читатель ([Фамилия], [Имя], [Отчество], [Дата рождения], [Контактный номер], [Адрес проживания], [Данные паспорта], [Номер читательского билета], [Код группы])
VALUES 
    ('Иванов', 'Иван', 'Иванович', '1999-03-15', '+375291234567', 'ул. Ленина, 10', 'MP1234567', 'C001', 1),
    ('Петрова', 'Елена', 'Сергеевна', '2000-05-20', '+375291234568', 'ул. Пушкина, 5', 'MP2345678', 'C002', 2),
    ('Сидоров', 'Алексей', 'Петрович', '1998-07-25', '+375291234569', 'ул. Кирова, 15', 'MP3456789', 'C003', 3);

-- Для таблицы [Выдача и возврат]
INSERT INTO [Выдача и возврат] ([Код читателя], [Код книги], [Инвентарный номер], [Дата выдачи],[Дата возврата], [Код сотрудника, выдавшего книгу])
VALUES 
    (1, 1, 'INV001', '2023-04-01',null, 1),
    (2, 3, 'INV002', '2023-05-05',null, 2),
    (3, 4, 'INV003', '2023-06-10','2024-05-05', 3)

GO

--ПУБЛИЧНАЯ ИНФОРМАЦИЯ
CREATE FUNCTION BooksPublicInfo(
    @SearchTerm VARCHAR(100)
)
RETURNS TABLE
AS
RETURN
(
    SELECT 
        Книга.[Название], 
        Автор.Автор AS Автор,
        Жанр.[Название жанра] AS Жанр,
        Издательство.[Название] AS Издательство,
        Книга.[Год выпуска], 
        Книга.[Число страниц], 
        Книга.[Язык книги], 
        Книга.[Обложка],
        COUNT(DISTINCT CASE WHEN ([Выдача и возврат].[Дата выдачи] IS NOT NULL 
            AND [Выдача и возврат].[Дата возврата] IS NOT NULL
            AND [Выдача и возврат].[Книга утеряна] IS NULL)
            OR [Выдача и возврат].[Дата выдачи] IS NULL
            THEN Книга.Код ELSE NULL END) AS Доступность,
        COUNT(CASE WHEN [Выдача и возврат].[Дата выдачи] IS NOT NULL THEN [Выдача и возврат].[Код читателя] ELSE NULL END) AS [Как часто брали], 
        Книга.[Краткое описание]
    FROM 
        Книга
    JOIN 
        Жанр ON Книга.[Код жанра] = Жанр.Код
    JOIN 
        [Издательство] ON Книга.[Код издательства] = [Издательство].Код
    LEFT JOIN 
        (SELECT 
            [Автор книги].[Код книги],
            STRING_AGG([Авторы].[Фамилия] + ' ' + [Авторы].[Имя] + ' ' + Авторы.Отчество, ', ') AS Автор
         FROM 
            [Автор книги]
         JOIN 
            [Авторы] ON [Авторы].Код = [Автор книги].[Код автора]
         GROUP BY 
            [Автор книги].[Код книги]
        ) AS Автор ON Автор.[Код книги] = Книга.Код
    LEFT JOIN 
        [Выдача и возврат] ON [Выдача и возврат].[Код книги] = Книга.Код
    WHERE 
        Книга.Название LIKE '%' + @SearchTerm + '%'
        OR Автор.Автор LIKE '%' + @SearchTerm + '%'
        OR Жанр.[Название жанра] LIKE '%' + @SearchTerm + '%'
    GROUP BY
        Книга.[Название], 
        Автор.Автор,
        Жанр.[Название жанра],
        Издательство.[Название],
        Книга.[Год выпуска], 
        Книга.[Число страниц], 
        Книга.[Язык книги], 
        Книга.[Обложка],
        Книга.[Краткое описание]
);

go




--select * from BooksPublicInfo('');
--КОНЕЦ ПУБЛИЧНАЯ ИНФОРМАЦИЯ
GO
--СЛУЖЕБНЫЕ ОПЕРАЦИИ
IF EXISTS (SELECT 1 FROM sys.database_principals WHERE name = 'Guest1')
BEGIN
    DROP USER Guest1;
END
GO

IF EXISTS (SELECT 1 FROM sys.server_principals WHERE name = 'Guest1')
BEGIN
    DROP LOGIN Guest1;
END
GO


CREATE LOGIN Guest1 WITH PASSWORD = '1';
CREATE USER Guest1 FOR LOGIN Guest1;

GRANT SELECT ON Библиотека.dbo.BooksPublicInfo TO Guest1;
GO
--КОНЕЦ СЛУЖЕБНЫЕ ОПЕРАЦИИ
--СЛУЖЕБНАЯ ИНФОРМАЦИЯ
CREATE PROCEDURE GetUserTablePermissions
	@DatabaseUserName NVARCHAR(255),
    @TableName NVARCHAR(255)
AS
BEGIN
SELECT dp.permission_name
        FROM sys.database_permissions dp
        JOIN sys.database_principals dpn ON dp.grantee_principal_id = dpn.principal_id
        WHERE dpn.name = (SELECT dp.name AS DatabaseUserName
        FROM sys.database_principals dp
        JOIN sys.server_principals sp ON dp.sid = sp.sid
        WHERE sp.name = @DatabaseUserName) AND dp.major_id = OBJECT_ID(@TableName)
END;
go

CREATE PROCEDURE GetUserRoles
    @LoginName NVARCHAR(100)
AS
BEGIN
    DECLARE @UserId INT;
    
    SELECT @UserId = dp.principal_id
    FROM sys.database_principals dp
    JOIN sys.server_principals sp ON dp.sid = sp.sid
    WHERE sp.name = @LoginName;

    SELECT role.name AS RoleName
    FROM sys.database_role_members members
    JOIN sys.database_principals role ON members.role_principal_id = role.principal_id
    WHERE members.member_principal_id = @UserId;
END;
go


CREATE PROCEDURE GetDependentTableName
	@ParentTableName varchar(50),
	@ColumnName varchar(50)
as
BEGIN
SELECT 
        OBJECT_NAME(fk.referenced_object_id) AS ReferencedTable
    FROM 
        sys.foreign_key_columns fkc
        JOIN sys.foreign_keys fk ON fkc.constraint_object_id = fk.object_id
        JOIN sys.columns c ON fkc.parent_column_id = c.column_id AND fkc.parent_object_id = c.object_id
    WHERE 
        OBJECT_NAME(fk.parent_object_id) = @ParentTableName
        AND c.name = @ColumnName
END;

/*
SELECT 
    fk.name AS ForeignKey,
    OBJECT_NAME(fk.parent_object_id) AS ParentTable,
    c1.name AS ParentColumn,
    OBJECT_NAME(fk.referenced_object_id) AS ReferencedTable,
    c2.name AS ReferencedColumn
FROM 
    sys.foreign_keys AS fk
INNER JOIN 
    sys.foreign_key_columns AS fkc ON fk.OBJECT_ID = fkc.constraint_object_id
INNER JOIN 
    sys.columns AS c1 ON fkc.parent_object_id = c1.object_id AND fkc.parent_column_id = c1.column_id
INNER JOIN 
    sys.columns AS c2 ON fkc.referenced_object_id = c2.object_id AND fkc.referenced_column_id = c2.column_id
WHERE 
    OBJECT_NAME(fk.parent_object_id) = 'Книга'
	*/
--КОНЕЦ СЛУЖЕБНАЯ ИНФОРМАЦИЯ
go
--ОТЧЕТЫ 

CREATE PROCEDURE dbo.GetPercentageUsersByGroupAndFaculty
(
    @StartDate DATE,
    @EndDate DATE
)
AS
BEGIN
    WITH ВыдачиКниг AS (
        SELECT
            Ч.Код AS [Код читателя],
            Г.[Код] AS [Код группы]
        FROM
            [Выдача и возврат] В
            INNER JOIN Читатель Ч ON В.[Код читателя] = Ч.Код
            INNER JOIN Группа Г ON Ч.[Код группы] = Г.[Код]
        WHERE
            В.[Дата выдачи] BETWEEN @StartDate AND @EndDate
    ),
    ЧитателиСВыдачами AS (
        SELECT
            Г.[Код факультета],
            Г.[Код] AS [Код группы],
            COUNT(DISTINCT Ч.[Код]) AS С_выдачами
        FROM
            Читатель Ч
            INNER JOIN ВыдачиКниг ВК ON Ч.Код = ВК.[Код читателя]
            INNER JOIN Группа Г ON Ч.[Код группы] = Г.[Код]
        WHERE
            Ч.[Код группы] IS NOT NULL
        GROUP BY
            Г.[Код факультета],
            Г.[Код]
    )
    SELECT
        Ф.[Название] AS [Название факультета],
        Г.[Название] AS [Название группы],
        CAST(YEAR(GETDATE()) - Г.[Год поступления] AS INT) AS [Курс],
        ISNULL(ЧитателиСВыдачами.С_выдачами, 0) AS [С выдачами],
        ISNULL(Читатели.Общее_количество, 0) AS [Общее количество],
        IIF(ISNULL(Читатели.Общее_количество, 0) = 0, 0, 100 * CAST(ISNULL(ЧитателиСВыдачами.С_выдачами, 0) AS FLOAT) / CAST(ISNULL(Читатели.Общее_количество, 0) AS FLOAT)) AS [Процент пользователей от читателей]
    FROM
        Факультет Ф
        INNER JOIN Группа Г ON Ф.[Код] = Г.[Код факультета]
        LEFT JOIN ЧитателиСВыдачами ON Г.[Код] = ЧитателиСВыдачами.[Код группы] AND Ф.[Код] = ЧитателиСВыдачами.[Код факультета]
        LEFT JOIN (
            SELECT
                Г.[Код факультета],
                Г.[Код] AS [Код группы],
                COUNT(DISTINCT Ч.[Код]) AS Общее_количество
            FROM
                Читатель Ч
                LEFT JOIN Группа Г ON Ч.[Код группы] = Г.[Код]
            WHERE
                Ч.[Код группы] IS NOT NULL
            GROUP BY
                Г.[Код факультета],
                Г.[Код]
        ) AS Читатели ON Г.[Код] = Читатели.[Код группы] AND Ф.[Код] = Читатели.[Код факультета];
END;
go


CREATE PROCEDURE dbo.GetDebtorsReport
(
    @StartDate DATETIME2,
    @EndDate DATETIME2
)
AS
BEGIN
    WITH ВыдачиКниг AS (
        SELECT
            Г.[Код факультета],
            Ч.[Код группы],
            MONTH(В.[Дата выдачи]) AS [Месяц],
            CASE
                WHEN MONTH(В.[Дата выдачи]) BETWEEN 1 AND 6 THEN '1-й семестр'
                WHEN MONTH(В.[Дата выдачи]) BETWEEN 7 AND 12 THEN '2-й семестр'
            END AS [Семестр],
            YEAR(В.[Дата выдачи]) AS [Год],
            COUNT(*) AS [Количество должников]
        FROM
            Читатель Ч
            INNER JOIN [Выдача и возврат] В ON Ч.[Код] = В.[Код читателя] AND В.[Дата возврата] IS NULL -- Должники
            INNER JOIN Группа Г ON Ч.[Код группы] = Г.[Код]
        WHERE
            В.[Дата выдачи] BETWEEN @StartDate AND @EndDate
        GROUP BY
            Г.[Код факультета],
            Ч.[Код группы],
            MONTH(В.[Дата выдачи]),
            CASE
                WHEN MONTH(В.[Дата выдачи]) BETWEEN 1 AND 6 THEN '1-й семестр'
                WHEN MONTH(В.[Дата выдачи]) BETWEEN 7 AND 12 THEN '2-й семестр'
            END,
            YEAR(В.[Дата выдачи])
    )
    SELECT
        Ф.[Название] AS [Название факультета],
        Г.[Название] AS [Название группы],
        CAST(YEAR(GETDATE()) - Г.[Год поступления] AS INT) AS Курс,
        VK.[Месяц] as [Месяц выдачи книги],
        VK.[Семестр],
        VK.[Год],
        VK.[Количество должников]
    FROM
        ВыдачиКниг VK
        INNER JOIN Группа Г ON VK.[Код группы] = Г.[Код]
        INNER JOIN Факультет Ф ON VK.[Код факультета] = Ф.[Код];
END;
go

CREATE PROCEDURE dbo.GetReaderInfoExact
AS
BEGIN
    SELECT
        
        [Читатель].[Фамилия],
        [Читатель].[Имя],
        [Читатель].[Отчество],
        [Читатель].[Дата рождения],
        [Читатель].[Контактный номер],
        [Читатель].[Адрес проживания],
        [Читатель].[Данные паспорта],
        [Читатель].[Номер читательского билета],
        [Группа].[Название] as 'Название группы',
        [Факультет].[Название] as 'Название факультета',
        [Читатель].[Имя для входа],
        [Выдача и возврат].[Дата выдачи] AS [Дата выдачи книги],
        [Книга].[Название] AS [Название книги],
        [Книга].[Язык книги] AS [Язык книги]
    FROM [Читатель]
    INNER JOIN [Выдача и возврат] ON [Читатель].[Код] = [Выдача и возврат].[Код читателя]
    INNER JOIN [Книга] ON [Выдача и возврат].[Код книги] = [Книга].[Код]
	INNER JOIN Группа ON Группа.Код = Читатель.[Код группы]
	INNER JOIN Факультет ON Факультет.Код = Группа.[Код факультета]
    WHERE [Выдача и возврат].[Дата возврата] IS NULL;
END;
GO


CREATE PROCEDURE FindBookLocation
    @sterm NVARCHAR(100)
AS
BEGIN
    SELECT 
        Книга.Название AS 'Название книги',
        Авторы.Автор,
        Стеллажи.[Номер стеллажа] AS 'Номер стеллажа',
        Помещения.Название AS 'Название помещения',
        Помещения.Название AS 'Тип помещения',
        Помещения.[Адрес помещения] AS 'Адрес помещения'
    FROM
        Книга
    INNER JOIN 
        (SELECT [Автор книги].[Код книги], STRING_AGG([Авторы].[Фамилия] + ' ' + [Авторы].[Имя] + ' ' + Авторы.Отчество, ', ') AS Автор
         FROM [Автор книги]
         INNER JOIN [Авторы] ON [Автор книги].[Код автора] = Авторы.Код
         GROUP BY [Автор книги].[Код книги]) AS Авторы ON Книга.Код = Авторы.[Код книги]
    INNER JOIN
        Стеллажи ON Книга.[Код стеллажа] = Стеллажи.Код
    INNER JOIN
        Помещения ON Стеллажи.[Код зала] = Помещения.Код
    WHERE
        Книга.Название LIKE '%' + @sterm + '%' OR
        Авторы.Автор LIKE '%' + @sterm + '%' OR
        EXISTS (
            SELECT 1
            FROM
                Жанр
            WHERE
                Жанр.[Название жанра] LIKE '%' + @sterm + '%'
        )
    GROUP BY Книга.Название, Авторы.Автор, Стеллажи.[Номер стеллажа], Помещения.Название, Помещения.Название, Помещения.[Адрес помещения]
END;
GO



--КОНЕЦ ОТЧЕТОВ
GO
-- ОПЕРАЦИИ

CREATE PROCEDURE RemoveOutdatedReaders AS
BEGIN
    
    INSERT INTO АрхивЧитателей ([Фамилия], [Имя], [Отчество], [Дата рождения],
                                 [Контактный номер], [Адрес проживания], [Данные паспорта],
                                 [Номер читательского билета], [Название группы], [Факультет],
                                 [Задолженности], [Имя для входа])
    SELECT Читатель.[Фамилия], Читатель.[Имя], Читатель.[Отчество], Читатель.[Дата рождения],
           Читатель.[Контактный номер], Читатель.[Адрес проживания], Читатель.[Данные паспорта],
           Читатель.[Номер читательского билета], Группа.[Название], Факультет.[Название],
           (SELECT STRING_AGG(CONCAT(Книга.[Название], ' (', [Выдача и возврат].[Инвентарный номер], ')', ' - ', 
                                    CONVERT(VARCHAR(10), [Дата выдачи], 104)), ', ')
            FROM [Выдача и возврат]
            INNER JOIN Книга ON [Выдача и возврат].[Код книги] = Книга.[Код]
            WHERE [Выдача и возврат].[Код читателя] = Читатель.[Код] AND [Дата возврата] IS NULL) AS [Задолженности],
           Читатель.[Имя для входа]
    FROM Читатель
    INNER JOIN Группа ON Читатель.[Код группы] = Группа.Код
    INNER JOIN Факультет ON Группа.[Код факультета] = Факультет.Код
    WHERE YEAR(GETDATE()) > Группа.[Год окончания];

    DELETE FROM [Выдача и возврат] where [Код читателя] IN(SELECT [Код] FROM АрхивЧитателей)
    DELETE FROM Читатель WHERE [Код] IN (SELECT [Код] FROM АрхивЧитателей);
END;
GO



--КОНЕЦ ОПЕРАЦИИ

GO
